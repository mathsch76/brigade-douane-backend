/**
 * üéõÔ∏è SERVICE DE GESTION DES PR√âF√âRENCES UTILISATEUR
 * Gestion centralis√©e des pr√©f√©rences et personnalisation
 */

const { supabase } = require('../utils/supabase');
import logger from '../utils/logger';
import { 
  enterpriseCache, 
  generateCacheKey, 
  botIdCache, 
  getCachedBotId, 
  cacheBotId 
} from '../utils/assistantCache';

// üéØ TYPES DE PR√âF√âRENCES
export interface UserPreferences {
  contentLevel: string;
  communicationStyle: string;
}

export interface CachedThreadData {
  threadId: string;
  preferences: UserPreferences;
}

// üîß GESTION DES BOTS

/**
 * R√©cup√®re bot_id avec cache optimis√©
 */
export async function getBotId(botName: string): Promise<string | null> {
  // V√©rifier cache d'abord
  const cached = getCachedBotId(botName);
  if (cached) {
    return cached;
  }

  try {
    const { data: botData, error } = await supabase
      .from('bots')
      .select('id')
      .eq('name', botName)
      .single();

    if (!error && botData) {
      cacheBotId(botName, botData.id);
      return botData.id;
    }

    logger.warn(`Bot ${botName} non trouv√© en base`);
    return null;
  } catch (err) {
    logger.error('Erreur getBotId', { botName, error: (err as Error).message });
    return null;
  }
}

// üé® GESTION DES PR√âF√âRENCES

/**
 * R√©cup√®re le style de communication global (tous bots)
 */
export async function getUserGlobalStyle(userId: string): Promise<string> {
  try {
    const { data: preferences, error } = await supabase
      .from('user_preferences')
      .select('communication_style')
      .eq('user_id', userId)
      .single();

    if (error || !preferences) {
      logger.debug('Style par d√©faut utilis√©', { userId });
      return 'professional'; // Style par d√©faut
    }

    return preferences.communication_style || 'professional';
  } catch (err) {
    logger.error('Erreur getUserGlobalStyle', { userId, error: (err as Error).message });
    return 'professional';
  }
}

/**
 * R√©cup√®re le niveau de contenu sp√©cifique au bot
 */
export async function getUserBotLevel(userId: string, botName: string): Promise<string> {
  try {
    if (!botName) {
  throw new Error("botName est requis mais est vide !");
}
const botId = await getBotId(botName);

    if (!botId) {
      return 'intermediate';
    }

    const { data: preferences, error } = await supabase
      .from('user_bot_preferences')
      .select('content_orientation')
      .eq('user_id', userId)
      .eq('bot_id', botId)
      .single();

    if (error || !preferences) {
      // Cr√©er niveau par d√©faut pour ce bot
      await createDefaultUserBotLevel(userId, botId);
      return 'intermediate';
    }

    return preferences.content_orientation || 'intermediate';
  } catch (err) {
    logger.error('Erreur getUserBotLevel', { userId, botName, error: (err as Error).message });
    return 'intermediate';
  }
}

/**
 * Cr√©e un niveau par d√©faut pour un bot sp√©cifique
 */
export async function createDefaultUserBotLevel(userId: string, botId: string): Promise<boolean> {
  try {
    const { error } = await supabase
      .from('user_bot_preferences')
      .insert({
        user_id: userId,
        bot_id: botId,
        content_orientation: 'intermediate'
        // Pas de communication_style ici car c'est global
      });

    if (error && error.code !== '23505') {
      logger.warn('Erreur cr√©ation niveau par d√©faut', { error: error.message });
      return false;
    }

    return true;
  } catch (err) {
    logger.error('Erreur createDefaultUserBotLevel', { error: (err as Error).message });
    return false;
  }
}

/**
 * FONCTION PRINCIPALE - R√©cup√®re les pr√©f√©rences utilisateur
 */
export async function getUserPreferences(userId: string, botName?: string): Promise<UserPreferences> {
  try {
    // 1. R√©cup√©rer STYLE global (m√™me pour tous les bots)
    const communicationStyle = await getUserGlobalStyle(userId);

    // 2. R√©cup√©rer NIVEAU sp√©cifique au bot
    let contentLevel = 'intermediate';
    if (botName) {
      contentLevel = await getUserBotLevel(userId, botName);
    }

    return {
      contentLevel,
      communicationStyle
    };
  } catch (err) {
    logger.error('Erreur getUserPreferences', { userId, botName, error: (err as Error).message });
    return {
      contentLevel: 'intermediate',
      communicationStyle: 'professional'
    };
  }
}

// üß† CONSTRUCTION DES INSTRUCTIONS PERSONNALIS√âES

/**
 * Construit les instructions personnalis√©es selon les pr√©f√©rences
 */
export function buildCustomInstructions(contentLevel: string, communicationStyle: string, chatbotId: string, nickname?: string): string {

  let instructions = "";
  
  // Instructions de base selon le bot
  switch (chatbotId) {
    case "EMEBI ET TVA UE":
      instructions = "Tu es un expert en r√©glementation douani√®re europ√©enne, sp√©cialis√© dans la TVA intracommunautaire et les proc√©dures EMEBI. ";
      break;
    case "CODE DES DOUANES UE":
      instructions = "Tu es un expert du Code des Douanes de l'Union Europ√©enne. ";
      break;
    case "MACF":
      instructions = "Tu es un sp√©cialiste du M√©canisme d'Ajustement Carbone aux Fronti√®res (MACF). ";
      break;
    case "SANCTIONS RUSSES":
      instructions = "Tu es un expert en sanctions internationales, particuli√®rement les sanctions contre la Russie. ";
      break;
    case "USA":
      instructions = "Tu es un expert en r√©glementation douani√®re am√©ricaine (CBP, ITAR, etc.). ";
      break;
    case "EUDR":
      instructions = "Tu es un expert en r√©glementation EUDR (European Union Deforestation Regulation). ";
      break;
    default:
      instructions = "Tu es un assistant sp√©cialis√© en r√©glementation douani√®re et commerciale. ";
  }
  
  // ‚úÖ ADAPTATION SELON LE NIVEAU DE CONTENU
  switch (contentLevel) {
    case 'beginner':
      instructions += "NIVEAU D√âBUTANT: Explique de fa√ßon tr√®s simple et accessible. Utilise des exemples concrets du quotidien. √âvite le jargon technique. Structure tes r√©ponses avec des points clairs et courts. Propose toujours des exemples pratiques. ";
      break;
    case 'intermediate':
      instructions += "NIVEAU INTERM√âDIAIRE: √âquilibre entre simplicit√© et pr√©cision technique. Utilise le vocabulaire professionnel en l'expliquant. Donne des exemples concrets et des r√©f√©rences r√©glementaires essentielles. ";
      break;
    case 'advanced':
      instructions += "NIVEAU AVANC√â: Sois technique et approfondi. Utilise le vocabulaire expert. Cite les r√©f√©rences r√©glementaires pr√©cises, les articles de loi, les jurisprudences. Analyse les nuances et cas particuliers. ";
      break;
    default:
      instructions += "NIVEAU INTERM√âDIAIRE: √âquilibre entre simplicit√© et pr√©cision technique. ";
  }
  
  // ‚úÖ ADAPTATION SELON LE STYLE DE COMMUNICATION
  switch (communicationStyle) {
    case 'casual':
      instructions += "STYLE D√âCONTRACT√â: Tutoie l'utilisateur. Utilise un ton amical et d√©tendu. N'h√©site pas √† faire des blagues appropri√©es ou utiliser des expressions famili√®res. Sois chaleureux dans tes interactions. ";
      break;
    case 'professional':
      instructions += "STYLE PROFESSIONNEL: Vouvoie l'utilisateur. Utilise un ton formel et respectueux. Reste courtois et professionnel dans toutes tes r√©ponses. Adopte le registre du conseil expert. ";
      break;
    case 'technical':
      instructions += "STYLE TECHNIQUE: Sois pr√©cis et factuel. Utilise un langage expert sans fioritures. Concentre-toi sur les aspects techniques et r√©glementaires. Privil√©gie la pr√©cision √† la convivialit√©. ";
      break;
    default:
      instructions += "STYLE PROFESSIONNEL: Vouvoie l'utilisateur et reste courtois. ";
  }
  
// ‚úÖ PERSONNALISATION AVEC NICKNAME
if (nickname) {
  instructions += `L'utilisateur s'appelle ${nickname}. Utilise son pr√©nom dans tes r√©ponses quand c'est appropri√© (ex: "Bonjour ${nickname}", "Comme tu le sais ${nickname}..."). `;
}

  // Instructions finales communes
  instructions += "R√©ponds toujours en fran√ßais. Si tu ne connais pas la r√©ponse, dis-le clairement et propose des pistes de recherche. ";
  
  return instructions;
}


// üöÄ R√âPONSES RAPIDES PERSONNALIS√âES

/**
 * V√©rifie si c'est un salut simple
 */
export function isGreeting(question: string): boolean {
  return /^(bonjour|salut|hello|hey|coucou)$/i.test(question.trim());
}

/**
 * G√©n√®re une r√©ponse rapide selon le style
 */
export function getQuickReply(question: string, communicationStyle: string): string {
  const lowerQuestion = question.toLowerCase().trim();
  
  // Adapter selon le style de communication
  const casual = communicationStyle === 'casual';
  const technical = communicationStyle === 'technical';
  
  if (isGreeting(lowerQuestion)) {
    if (casual) {
      return "ü§ñ Salut ! Comment √ßa va ? Dis-moi ce que tu veux savoir !";
    } else if (technical) {
      return "ü§ñ Bonjour. Syst√®me op√©rationnel. Quel est votre besoin d'assistance ?";
    } else {
      return "ü§ñ Bonjour ! Comment puis-je vous aider aujourd'hui ?";
    }
  }
  
  if (/^merci/.test(lowerQuestion)) {
    if (casual) {
      return "ü§ñ De rien ! C'√©tait un plaisir de t'aider !";
    } else if (technical) {
      return "ü§ñ Requ√™te trait√©e avec succ√®s.";
    } else {
      return "ü§ñ Je vous en prie ! C'est avec plaisir.";
    }
  }
  
  if (/^√ßa va/.test(lowerQuestion)) {
    if (casual) {
      return "ü§ñ √áa roule ! Et toi, tout va bien ?";
    } else if (technical) {
      return "ü§ñ Tous les syst√®mes fonctionnent normalement.";
    } else {
      return "ü§ñ Tout va bien, merci ! Et vous ?";
    }
  }
  
  if (/^au revoir|√† plus|bonne journ√©e/.test(lowerQuestion)) {
    if (casual) {
      return "ü§ñ √Ä plus ! Passe une super journ√©e !";
    } else if (technical) {
      return "ü§ñ Session termin√©e. Fin de communication.";
    } else {
      return "ü§ñ Au revoir ! Passez une excellente journ√©e !";
    }
  }
  
  // R√©ponse par d√©faut
  if (casual) {
    return "ü§ñ Hey ! Je suis l√† pour t'aider, dis-moi tout !";
  } else if (technical) {
    return "ü§ñ Syst√®me pr√™t. Formulez votre requ√™te.";
  } else {
    return "ü§ñ Je suis √† votre disposition pour vous aider !";
  }
}

/**
 * R√©ponse rapide personnalis√©e avec fallback BDD
 */
export async function getPersonalizedQuickReply(
  question: string, 
  userId: string, 
  chatbotId: string,
  providedStyle?: string
): Promise<string> {
  try {
    // R√©cup√©rer le style depuis les param√®tres ou la BDD
    let communicationStyle = providedStyle;
    
    if (!communicationStyle) {
      const { data: preferences } = await supabase
        .from('user_preferences')
        .select('communication_style')
        .eq('user_id', userId)
        .single();
      
      communicationStyle = preferences?.communication_style || 'professional';
    }
    
    // G√©n√©rer la r√©ponse adapt√©e
    return getQuickReply(question, communicationStyle);
    
  } catch (error) {
    // Fallback en cas d'erreur
    return getQuickReply(question, 'professional');
  }
}