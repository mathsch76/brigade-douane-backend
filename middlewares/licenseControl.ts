const { supabase } = require('../utils/supabase');
// auth-backend/middlewares/licenseControl.ts
// üéØ MIDDLEWARE SIMPLIFI√â - UTILISE req.user.license DE authguard
import { Request, Response, NextFunction } from 'express';

import logger from '../utils/logger';
import config from '../utils/config';
import { AuthenticatedRequest } from './authguard'; // Import du type



/**
 * üõ°Ô∏è Middleware simplifi√© : V√©rifier l'acc√®s au chatbot
 * Usage : app.use('/assistant/ask', checkBotLicense);
 */
export const checkBotLicense = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  try {
    console.log('üîç LICENSE CONTROL - D√©but v√©rification');
    
    // 1. R√©cup√©rer les infos utilisateur (enrichies par authguard)
    const user = req.user;
    const { chatbot_id } = req.body;

    if (!user) {
      console.log('‚ùå Pas d\'utilisateur dans req.user');
      return res.status(401).json({ 
        error: 'Authentification requise',
        code: 'AUTH_REQUIRED'
      });
    }

    if (!chatbot_id) {
      console.log('‚ùå chatbot_id manquant');
      return res.status(400).json({ 
        error: 'Nom du bot requis',
        code: 'BOT_NAME_REQUIRED'
      });
    }

    console.log('üîç Infos utilisateur:', {
      id: user.id,
      email: user.email,
      role: user.role,
      hasLicense: !!user.license,
      chatbot_id
    });

    // 2. üëë BYPASS ADMIN - Les admins ont acc√®s √† tout
    if (user.role === 'admin') {
      console.log('üëë ADMIN D√âTECT√â - Acc√®s autoris√© sans v√©rification licence');
      logger.info('üëë Admin acc√®s autoris√©', { 
        userId: user.id, 
        email: user.email, 
        chatbot_id 
      });
      
      // Attacher des infos fictives pour √©viter les erreurs
      (req as any).userLicense = {
        id: 'admin-unlimited',
        requests_used: 0,
        max_requests: 999999
      };
      
      return next();
    }

    // 3. üé´ V√âRIFICATION LICENCE POUR LES USERS
    console.log('üé´ V√©rification licence user...');
    
    if (!user.license) {
      console.log('‚ùå Aucune licence trouv√©e pour le user');
      logger.warn('‚ùå User sans licence active', { 
        userId: user.id, 
        email: user.email, 
        chatbot_id 
      });
      return res.status(403).json({
        error: 'Licence requise',
        message: 'Vous n\'avez pas de licence active. Contactez votre administrateur.',
        code: 'NO_ACTIVE_LICENSE'
      });
    }

    const license = user.license;
    console.log('üé´ Licence trouv√©e:', {
      licenseId: license.license_id,
      isActive: license.license?.is_active,
      requestsUsed: license.requests_used,
      maxRequests: license.license?.max_requests
    });

    // 4. V√©rifier que la licence est active
    if (!license.license?.is_active) {
      console.log('‚ùå Licence inactive');
      logger.warn('‚ùå Licence inactive', { 
        userId: user.id, 
        licenseId: license.license_id 
      });
      return res.status(403).json({
        error: 'Licence inactive',
        message: 'Votre licence est inactive. Contactez votre administrateur.',
        code: 'INACTIVE_LICENSE'
      });
    }

    // 5. ü§ñ V√âRIFIER L'ACC√àS AU BOT SP√âCIFIQUE
    // Maintenant on v√©rifie si l'user a acc√®s √† ce bot pr√©cis
    console.log('ü§ñ V√©rification acc√®s bot sp√©cifique...');
    
    const { data: botAccess, error: botError } = await supabase
      .from('user_bots')
      .select(`
        id,
        bots!inner (
          id,
          name
        )
      `)
      .eq('user_id', user.id)
      .eq('bots.name', chatbot_id)
      .limit(1);

    if (botError) {
      console.log('‚ùå Erreur v√©rification acc√®s bot:', botError);
      logger.error('‚ùå Erreur v√©rification acc√®s bot', { 
        error: botError.message,
        userId: user.id,
        chatbot_id
      });
      return res.status(500).json({
        error: 'Erreur de v√©rification',
        message: 'Impossible de v√©rifier l\'acc√®s au bot.',
        code: 'BOT_ACCESS_CHECK_ERROR'
      });
    }

    if (!botAccess || botAccess.length === 0) {
      console.log('‚ùå Pas d\'acc√®s au bot sp√©cifique');
      logger.warn('‚ùå User sans acc√®s au bot', { 
        userId: user.id, 
        chatbot_id 
      });
      return res.status(403).json({
        error: 'Acc√®s bot refus√©',
        message: `Vous n'avez pas acc√®s au bot ${chatbot_id}. Contactez votre administrateur.`,
        code: 'BOT_ACCESS_DENIED'
      });
    }

    console.log('‚úÖ Acc√®s bot autoris√©');

    // 6. V√©rifier les quotas
    const requestsUsed = license.requests_used || 0;
    const maxRequests = license.license?.max_requests || 1000;

    console.log('üìä V√©rification quotas:', { requestsUsed, maxRequests });

    if (maxRequests > 0 && requestsUsed >= maxRequests) {
      console.log('‚ùå Quota d√©pass√©');
      logger.warn('‚ùå Quota d√©pass√©', {
        userId: user.id,
        chatbot_id,
        requestsUsed, 
        maxRequests 
      });
      return res.status(429).json({
        error: 'Quota d√©pass√©',
        message: `Quota mensuel atteint (${requestsUsed}/${maxRequests}). Contactez votre administrateur.`,
        code: 'QUOTA_EXCEEDED',
        usage: {
          used: requestsUsed,
          max: maxRequests,
          remaining: 0
        }
      });
    }

    // 7. ‚úÖ TOUT EST BON !
    console.log('‚úÖ Toutes les v√©rifications pass√©es');
    
    // Attacher les infos pour l'incr√©mentation ult√©rieure
    (req as any).userLicense = {
      id: license.id,
      requests_used: requestsUsed,
      max_requests: maxRequests
    };

    logger.info(`‚úÖ Acc√®s autoris√© pour ${chatbot_id}`, {
      userId: user.id,
      email: user.email,
      chatbot_id,
      usage: `${requestsUsed}/${maxRequests}`
    });

    next();

  } catch (err) {
    console.log('‚ùå Exception dans checkBotLicense:', (err as Error).message);
    logger.error('‚ùå Exception dans checkBotLicense', {
      error: (err as Error).message,
      stack: (err as Error).stack,
      userId: req.user?.id
    });
    return res.status(500).json({
      error: 'Erreur serveur',
      message: 'Une erreur inattendue s\'est produite.',
      code: 'SERVER_ERROR'
    });
  }
};

/**
 * üìä Middleware pour incr√©menter le compteur apr√®s un appel r√©ussi
 * Usage : Utiliser APR√àS le middleware principal ET la route d'assistant
 */
export const incrementUsage = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  // Sauvegarder la m√©thode json originale
  const originalJson = res.json;

  // Intercepter la r√©ponse pour d√©tecter le succ√®s
  res.json = function(body: any) {
    // Si la r√©ponse est un succ√®s ET qu'on a les infos de licence
    if (res.statusCode >= 200 && res.statusCode < 300 && (req as any).userLicense) {
      
      const userLicense = (req as any).userLicense;
      
      // ‚úÖ NE PAS INCR√âMENTER POUR LES ADMINS
      if (userLicense.id === 'admin-unlimited') {
        console.log('üîì Admin : pas d\'incr√©mentation d\'usage');
        return originalJson.call(this, body);
      }
      
      // Incr√©menter en arri√®re-plan pour les utilisateurs normaux
      console.log('üìà Incr√©mentation usage en cours...');
      supabase
        .from('user_licenses')
        .update({ 
          requests_used: userLicense.requests_used + 1 
        })
        .eq('id', userLicense.id)
        .then(({ error }) => {
          if (error) {
            logger.error('‚ùå Erreur incr√©mentation usage', { 
              error: error.message,
              userLicenseId: userLicense.id
            });
          } else {
            console.log('‚úÖ Usage incr√©ment√© avec succ√®s');
            logger.info('‚úÖ Usage incr√©ment√©', { 
              userLicenseId: userLicense.id,
              newCount: userLicense.requests_used + 1
            });
          }
        })
        .catch(err => {
          logger.error('‚ùå Exception incr√©mentation usage', { 
            error: err.message 
          });
        });
    }

    // Appeler la m√©thode json originale
    return originalJson.call(this, body);
  };

  next();
};

/**
 * üîç Fonction utilitaire : R√©cup√©rer les bots accessibles d'un utilisateur
 * Usage : Pour afficher seulement les bots autoris√©s dans le frontend
 */
export const getUserAccessibleBots = async (userId: string): Promise<any[]> => {
  try {
    const { data: userBots, error } = await supabase
      .from('user_bots')
      .select(`
        id,
        created_at,
        bots (
          id,
          name,
          description
        )
      `)
      .eq('user_id', userId);

    if (error) {
      logger.error('‚ùå Erreur r√©cup√©ration bots accessibles', { 
        error: error.message,
        userId
      });
      return [];
    }

    // Transformer les donn√©es pour le frontend
    const accessibleBots = (userBots || []).map(ub => {
      const bot = ub.bots;
      return {
        id: bot.id,
        name: bot.name,
        description: bot.description,
        enabled: true,
        granted_at: ub.created_at
      };
    });

    logger.info(`‚úÖ ${accessibleBots.length} bots accessibles r√©cup√©r√©s`, { userId });
    return accessibleBots;

  } catch (err) {
    logger.error('‚ùå Exception r√©cup√©ration bots accessibles', {
      error: (err as Error).message,
      userId
    });
    return [];
  }
};